{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Jumbotron/index.js","components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navbar","Jumbotron","Cards","onClick","imageClicked","name","alt","src","image","App","state","cards","score","highscore","message","clicked","chosenImage","newImages","length","card","Math","floor","random","indexOf","push","_this","setState","alert","_this2","this","components_Navbar","components_Jumbotron","components_Wrapper","map","components_Cards","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m9EAOeA,MAJf,SAAiBC,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCgB5BC,MAjBf,SAAgBN,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,eAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACTJ,EAAMK,oBCEhBE,MAVf,SAAmBP,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,mFCQDI,MAXf,SAAeR,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKM,QAAS,kBAAMT,EAAMU,aAAaV,EAAMW,OAAOA,KAAMX,EAAMW,KAAKC,IAAKZ,EAAMW,KAAME,IAAKb,EAAMc,WCyFlGC,6MArFbC,MAAQ,CACNC,QACAC,MAAO,EACPC,UAAW,EACXC,QAAS,QACTC,QAAS,MAGXC,YAAc,WAEZ,IADA,IAAMC,EAAY,GACXA,EAAUC,OAASP,EAAMO,QAAQ,CACtC,IAAIC,EAAOR,EAAMS,KAAKC,MAAMD,KAAKE,SAAWX,EAAMO,SAC9CD,EAAUM,QAAQJ,GAAQ,GAC5BF,EAAUO,KAAKL,GAGnB,OAAOF,KAITb,aAAe,SAAAC,GACb,GAAIoB,EAAKf,MAAMK,QAAQQ,QAAQlB,IAAS,EAgBtC,OAfAoB,EAAKC,SAAS,CACZX,QAAS,KAIPU,EAAKf,MAAME,MAAQa,EAAKf,MAAMG,WAChCY,EAAKC,SAAS,CACZb,UAAWY,EAAKf,MAAME,aAI1Ba,EAAKC,SAAS,CACZd,MAAO,IAMT,IAAIA,EAAQa,EAAKf,MAAME,MAET,OADdA,GAEEe,MAAM,YAGJf,EAAQa,EAAKf,MAAMG,WACrBY,EAAKC,SAAS,CACZb,UAAWD,IAIfa,EAAKC,SAAS,CACZd,MAAOA,IAIX,IAAIG,EAAUU,EAAKf,MAAMK,QACzBA,EAAQS,KAAKnB,GACboB,EAAKC,SAAS,CACZX,qFAIK,IAAAa,EAAAC,KACP,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,KAAKnC,EAAAC,EAAAC,cAAA,sBAAcgC,KAAKnB,MAAME,MAAzB,kBAA+CiB,KAAKnB,MAAMG,YAC/DlB,EAAAC,EAAAC,cAACkC,EAAD,KAAQF,KAAKnB,MAAMI,SACnBnB,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ+B,KAAKb,cAAciB,IAAI,SAAAd,GAAI,OAC1BxB,EAAAC,EAAAC,cAACqC,EAAD,CACE9B,aAAcwB,EAAKxB,aACnBC,KAAMc,EAAKd,KACXG,MAAOW,EAAKX,oBA9EV2B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.677d228a.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport './style.css'\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <span className=\"navbar-text\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">Clicky Game</li>\r\n\r\n                    <li className=\"scores nav-item\">\r\n                        {props.children}\r\n                    </li>\r\n                </ul>\r\n            </span>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport './style.css'\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Pick all available pictures without choosing the same one twice</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport './style.css'\r\n\r\n\r\nfunction Cards(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"imgs\">\r\n                <img onClick={() => props.imageClicked(props.name)} name={props.name}alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n \r\nexport default Cards;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Navbar\";\nimport Title from \"./components/Jumbotron\";\nimport cards from \"./cards.json\";\nimport Cards from \"./components/Cards\";\nimport \"./index.css\";\n\n\nclass App extends Component {\n\n\n  state = {\n    cards,\n    score: 0,\n    highscore: 0,\n    message: \"Start\",\n    clicked: []\n  };\n\n  chosenImage = () => {\n    const newImages = [];\n    while (newImages.length < cards.length) {\n      let card = cards[Math.floor(Math.random() * cards.length)];\n      if (newImages.indexOf(card) < 0) {\n        newImages.push(card)\n      }\n    }\n    return newImages\n  }\n\n\n  imageClicked = name => {\n    if (this.state.clicked.indexOf(name) > -1) {\n      this.setState({\n        clicked: [],\n      })\n\n     \n      if (this.state.score > this.state.highscore) {\n        this.setState({\n          highscore: this.state.score\n        })\n      }\n\n      this.setState({\n        score: 0,\n      })\n\n      return;\n\n    } else {\n      var score = this.state.score;\n      score++;\n      if (score === 12) {\n        alert(\"YOU WON!\")\n      }\n\n      if (score > this.state.highscore) {\n        this.setState({\n          highscore: score\n        })\n  \n      }\n      this.setState({\n        score: score,\n      })\n    }\n\n    let clicked = this.state.clicked\n    clicked.push(name)\n    this.setState({\n      clicked\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav><span>Score: {this.state.score},   Highscore: {this.state.highscore}</span></Nav>\n        <Title>{this.state.message}</Title>\n        <Wrapper>\n          <div className=\"row\">\n            {this.chosenImage().map(card => (\n              <Cards\n                imageClicked={this.imageClicked}\n                name={card.name}\n                image={card.image}\n              />\n            ))}\n          </div>\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}